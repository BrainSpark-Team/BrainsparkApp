@page "/admin/newexam"

@inject ExamPageService ExamService
@inject HttpClient httpClient

<div class="container">
	<div class="row">
		<div class="col-12 d-flex justify-content-between p-0">
			<NavLink class="my-auto" href="/">
				Back <img src="/Images/arrow-left.svg" />
			</NavLink>
		</div>
		<CreateExamType />
		<ExamDescription />
		<div class="col-12 exam-container px-md-4 py-md-5 mt-3">
			<input class="exam-title" id="examTitle" type="text" autocomplete="off" maxlength="20" @bind="ExamTitle" placeholder="Enter the exam title" />
			<div class="col-12 add-new-container p-0 p-md-3 d-flex">
				<div class="add-btn-container">
					<button class="@(IsActiveButton(1) ? "active-button" : "") ms-0 ms-md-4" @onclick="() => ToggleActive(1)">Single Choice</button>
					<button class="@(IsActiveButton(2) ? "active-button" : "") ms-0 ms-md-4" @onclick="() => ToggleActive(2)">Multiple Choice</button>
					<button class="@(IsActiveButton(3) ? "active-button" : "") ms-0 ms-md-4" @onclick="() => ToggleActive(3)">Text</button>
				</div>
			</div>
			@if (activeButton == 1)
			{
			<div class="input-boxes">
				<div class="in-grp">
					<label for="question">Question</label>
						<input class="question-input" id="question" autocomplete="off" maxlength="100" type="text" @bind="Question" placeholder="Write the question" />
				</div>
				<div class="in-grp">
					<label for="ans1">Answer 1</label>
					<div class="form-check d-inline">
						<div class="flex-check">
								<input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1" @onclick="() => UpdateSingleChoiceSelectedAnswer(0)" checked="@IsSingleChoiceSelected(0)">
								<input class="text-bar w-100 @(showErrorMessage && string.IsNullOrWhiteSpace(inputValue1) ? "error-input" : "")" id="ans1" type="text" autocomplete="off" maxlength="100" @bind="inputValue1" placeholder="Write the answer" />
							<div class="selected-option">
									@if (selectedAnswerIndex == 0)
								{
									<i class="check-mark fa-solid fa-check fa-xl" style="color: #156523;"></i>
								}
							</div>
						</div>
						@if (showErrorMessage && string.IsNullOrWhiteSpace(inputValue1))
						{
							<span class="text-danger placeholder-text">Please write something here</span>
						}
					</div>
				</div>
				<div class="in-grp">
					<label for="ans2">Answer 2</label>
					<div class="form-check d-inline">
						<div class="flex-check">
							<input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault2" @onclick="() => UpdateSingleChoiceSelectedAnswer(1)" checked="@IsSingleChoiceSelected(1)">
								<input class="text-bar w-100 @(showErrorMessage && string.IsNullOrWhiteSpace(inputValue2) ? "error-input" : "")" id="ans2" type="text" autocomplete="off" maxlength="100" @bind="inputValue2" placeholder="Write the answer" />
							<div class="selected-option">
									@if (selectedAnswerIndex == 1)
								{
									<i class="check-mark fa-solid fa-check fa-xl" style="color: #156523;"></i>
								}
							</div>
						</div>
						@if (showErrorMessage && string.IsNullOrWhiteSpace(inputValue2))
						{
							<span class="text-danger placeholder-text">Please write something here</span>
						}
					</div>
				</div>

				<div class="in-grp">
					<label for="ans3">Answer 3</label>
					<div class="form-check d-inline">
						<div class="flex-check">
								<input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault3" @onclick="() => UpdateSingleChoiceSelectedAnswer(2)" checked="@IsSingleChoiceSelected(2)">
								<input class="text-bar w-100 @(showErrorMessage && string.IsNullOrWhiteSpace(inputValue3) ? "error-input" : "")" id="ans3" type="text" autocomplete="off" maxlength="100" @bind="inputValue3" placeholder="Write the answer" />
							<div class="selected-option">
									@if (selectedAnswerIndex == 2)
								{
									<i class="check-mark fa-solid fa-check fa-xl" style="color: #156523;"></i>
								}
							</div>
						</div>
						@if (showErrorMessage && string.IsNullOrWhiteSpace(inputValue3))
						{
							<span class="text-danger placeholder-text">Please write something here</span>
						}
					</div>
				</div>
				<div class="in-grp">
					<label for="ans4">Answer 4</label>
					<div class="form-check d-inline">
						<div class="flex-check">
								<input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault4" @onclick="() => UpdateSingleChoiceSelectedAnswer(3)" checked="@IsSingleChoiceSelected(3)">
								<input class="text-bar w-100 @(showErrorMessage && string.IsNullOrWhiteSpace(inputValue4) ? "error-input" : "")" id="ans4" type="text" autocomplete="off" maxlength="100" @bind="inputValue4" placeholder="Write the answer" />
							<div class="selected-option">
									@if (selectedAnswerIndex == 3)
								{
									<i class="check-mark fa-solid fa-check fa-xl" style="color: #156523;"></i>
								}
							</div>
						</div>
						@if (showErrorMessage && string.IsNullOrWhiteSpace(inputValue4))
						{
							<span class="text-danger placeholder-text">Please write something here</span>
						}
					</div>
				</div>

				<button class="add-question-button" @onclick="AddToInputList">Add question</button>


				@if (showErrorMessage)
				{
					<p class="text-danger">Please fill in all input fields or choose a correct answer before adding to the list.</p>
				}
				</div>


			} else if(activeButton == 2)
			{
				<div class="input-boxes">
					<div class="in-grp">
						<label for="question">Question</label>
						<input class="question-input" autocomplete="off" id="question" type="text" maxlength="100" @bind="Question" placeholder="Write the question" />
					</div>
					<div class="in-grp">
						<label for="ans1">Answer 1</label>
						<div class="form-check d-inline">
							<div class="flex-check">
								<input class="form-check-input" type="checkbox" name="flexCheckBoxDefault" id="flexCheckBoxDefault1" @onclick="() => UpdateMultipleChoiceSelectedAnswer(0)" checked="@IsMultipleChoiceSelected(0)">
								<input class="text-bar w-100 @(showErrorMessage && string.IsNullOrWhiteSpace(inputValue1) ? "error-input" : "")" id="ans1" type="text" autocomplete="off" maxlength="100" @bind="inputValue1" placeholder="Write the answer" />
								<div class="selected-option">
									@if (selectedAnswerIndexes.Contains(0))
									{
										<i class="check-mark fa-solid fa-check fa-xl" style="color: #156523;"></i>
									}
								</div>
							</div>
							@if (showErrorMessage && string.IsNullOrWhiteSpace(inputValue1))
							{
								<span class="text-danger placeholder-text">Please write something here</span>
							}
						</div>
					</div>
					<div class="in-grp">
						<label for="ans2">Answer 2</label>
						<div class="form-check d-inline">
							<div class="flex-check">
                                <input class="form-check-input" type="checkbox" name="flexCheckBoxDefault" id="flexCheckBoxDefault2" @onclick="() => UpdateMultipleChoiceSelectedAnswer(1)" checked="@IsMultipleChoiceSelected(1)">
								<input class="text-bar w-100 @(showErrorMessage && string.IsNullOrWhiteSpace(inputValue2) ? "error-input" : "")" id="ans2" type="text" autocomplete="off" maxlength="100" @bind="inputValue2" placeholder="Write the answer" />
								<div class="selected-option">
									@if (selectedAnswerIndexes.Contains(1))
									{
										<i class="check-mark fa-solid fa-check fa-xl" style="color: #156523;"></i>
									}
								</div>
							</div>
							@if (showErrorMessage && string.IsNullOrWhiteSpace(inputValue2))
							{
								<span class="text-danger placeholder-text">Please write something here</span>
							}
						</div>
					</div>
					<div class="in-grp">
						<label for="ans3">Answer 3</label>
						<div class="form-check d-inline">
							<div class="flex-check">
								<input class="form-check-input" type="checkbox" name="flexCheckBoxDefault" id="flexCheckBoxDefault3" @onclick="() => UpdateMultipleChoiceSelectedAnswer(2)" checked="@IsMultipleChoiceSelected(2)">
								<input class="text-bar w-100 @(showErrorMessage && string.IsNullOrWhiteSpace(inputValue3) ? "error-input" : "")" id="ans3" type="text" autocomplete="off" maxlength="100" @bind="inputValue3" placeholder="Write the answer" />
								<div class="selected-option">
									@if (selectedAnswerIndexes.Contains(2))
									{
										<i class="check-mark fa-solid fa-check fa-xl" style="color: #156523;"></i>
									}
								</div>
							</div>
							@if (showErrorMessage && string.IsNullOrWhiteSpace(inputValue3))
							{
								<span class="text-danger placeholder-text">Please write something here</span>
							}
						</div>
					</div>
					<div class="in-grp">
						<label for="ans4">Answer 4</label>
						<div class="form-check d-inline">
							<div class="flex-check">
								<input class="form-check-input" type="checkbox"  name="flexCheckBoxDefault" id="flexCheckBoxDefault4" @onclick="() => UpdateMultipleChoiceSelectedAnswer(3)" checked="@IsMultipleChoiceSelected(3)">
								<input class="text-bar w-100 @(showErrorMessage && string.IsNullOrWhiteSpace(inputValue4) ? "error-input" : "")" id="ans4" type="text" autocomplete="off" maxlength="100" @bind="inputValue4" placeholder="Write the answer" />
								<div class="selected-option">
									@if (selectedAnswerIndexes.Contains(3))
									{
										<i class="check-mark fa-solid fa-check fa-xl" style="color: #156523;"></i>
									}
								</div>
							</div>
							@if (showErrorMessage && string.IsNullOrWhiteSpace(inputValue4))
							{
								<span class="text-danger placeholder-text">Please write something here</span>
							}
						</div>
					</div>

					<button class="add-question-button" @onclick="AddToInputList">Add question</button>


					@if (showErrorMessage)
					{
						<p class="text-danger">Please fill in all input fields or choose a correct answer before adding to the list.</p>
					}
				</div>

			} else if (activeButton == 3)
			{
				<div class="input-boxes">
					<div class="in-grp">
						<label for="question">Question</label>
						<input class="question-input" id="question" autocomplete="off" type="text" maxlength="100" @bind="Question" placeholder="Write the question" />
					</div>
					<div class="in-grp">
						<label for="ans1">Correct Answer</label>
						<div class="d-inline">
							<input class="text-bar w-100 @(showErrorMessage && string.IsNullOrWhiteSpace(inputValue1) ? "error-input" : "")" id="ans1" autocomplete="off" type="text" maxlength="100" @bind="inputValue1" placeholder="Write the answer" />
							@if (showErrorMessage && string.IsNullOrWhiteSpace(inputValue1))
							{
								<span class="text-danger placeholder-text">Please write something here</span>
							}
						</div>
					</div>

					<button class="add-question-button" @onclick="AddToInputList">Add question</button>


					@if (showErrorMessage)
					{
						<p class="text-danger">Please fill in all input fields or choose a correct answer before adding to the list.</p>
					}
				</div>
			}

			@foreach (var question in GetQuestionsForActiveButton())
			{
				count = 0;
				<div class="list-items">
					<div class="list-header">
						<h3><span class="first-text">Question:</span> @question.Text</h3>
						<div class="buttons">
							<button class="menu-buttons" disabled="@isEditing" @onclick="() => EditQuestion(question)"><i class="fa-solid fa-pen-to-square fa-xl" style="color: #515761;"></i></button>
							<button class="menu-buttons" disabled="@isEditing" @onclick="() => MoveQuestionUp(question)"><i class="fa-solid fa-arrow-up fa-xl" style="color: #515761;"></i></button>
							<button class="menu-buttons" disabled="@isEditing" @onclick="() => MoveQuestionDown(question)"><i class="fa-solid fa-arrow-down fa-xl" style="color: #515761;"></i></button>
							<button class="menu-buttons" disabled="@isEditing" @onclick="() => DeleteQuestion(question)"><i class="fa-solid fa-trash fa-xl" style="color: #515761;"></i></button>
						</div>
					</div>
					<ul>
						@foreach (var answer in question.Answers)
						{
							count++;
							<li>
								<span class="first-text">Answer @count: </span>@answer.Text @if (answer.IsCorrect) { <i class='check-mark fa-solid fa-check fa-l' style='color: #156523;'></i>; }
							</li>
						}
					</ul>
				</div>
			}

			@if (createdExam != null)
			{
				<div class="exam-details">
					<h2>@createdExam.Title</h2>
					@foreach (var question in createdExam.Questions)
					{
						<div class="question">
							<h3>@question.Text</h3>
							<ul>
								@foreach (var answer in question.Answers)
								{
									<li>@answer.Text @if (answer.IsCorrect)
										{
											<i class='check-mark fa-solid fa-check fa-l' style='color: #156523;'></i>
											;
										}</li>
								}
							</ul>
						</div>
					}
				</div>
			}
			<button class="create-btn" @onclick="CreateExam">Create exam</button>
		</div>
		
	</div>
</div>

@code {
	private int count = 0;
	private bool isEditing = false;
	private bool showErrorMessage = false;
	private int selectedAnswerIndex = -1; 
	private Exams createdExam;
	private string ExamTitle;
	private HashSet<int> selectedAnswerIndexes = new HashSet<int>();



	private bool IsSingleChoiceSelected(int answerIndex)
	{
		return selectedAnswerIndex == answerIndex;
	}

	private void UpdateSingleChoiceSelectedAnswer(int answerIndex)
	{
		if (IsSingleChoiceSelected(answerIndex))
		{
			selectedAnswerIndex = -1; 
		}
		else
		{
			selectedAnswerIndex = answerIndex;
		}
	}

	private bool IsMultipleChoiceSelected(int answerIndex)
	{
		return selectedAnswerIndexes.Contains(answerIndex);
	}

	private void UpdateMultipleChoiceSelectedAnswer(int answerIndex)
	{
		if (selectedAnswerIndexes.Contains(answerIndex))
		{
			selectedAnswerIndexes.Remove(answerIndex);
		}
		else
		{
			selectedAnswerIndexes.Add(answerIndex);
		}
	}

	private int activeButton = 0;

	private bool IsActiveButton(int buttonNumber)
	{
		return activeButton == buttonNumber;
	}

	private void ToggleActive(int buttonNumber)
	{
		activeButton = IsActiveButton(buttonNumber) ? 0 : buttonNumber;
	}
	private string Question = "";
	private string inputValue1 = "";
	private string inputValue2 = "";
	private string inputValue3 = "";
	private string inputValue4 = "";

	private List<ExamQuestion> singleChoiceQuestions = new List<ExamQuestion>();
	private List<ExamQuestion> multipleChoiceQuestions = new List<ExamQuestion>();
	private List<ExamQuestion> textQuestions = new List<ExamQuestion>();
	private List<ExamQuestion> examQuestions = new List<ExamQuestion>();

	private bool AnyInputIsEmpty()
	{
		if (activeButton == 3)
		{
			return string.IsNullOrWhiteSpace(inputValue1);
		}
		else
		{
			return string.IsNullOrWhiteSpace(inputValue1) ||
							string.IsNullOrWhiteSpace(inputValue2) ||
							string.IsNullOrWhiteSpace(inputValue3) ||
							string.IsNullOrWhiteSpace(inputValue4);
		}
	}

	private void AddToInputList()
	{
		isEditing = false;

		if (AnyInputIsEmpty() || (activeButton == 1 && selectedAnswerIndex == -1) || (activeButton == 2 && selectedAnswerIndexes.Count == 0) || (activeButton == 3 && string.IsNullOrWhiteSpace(inputValue1)))
		{
			showErrorMessage = true;
			return;
		}

		showErrorMessage = false;

		var newAnswers = new List<Answer>();
		if (activeButton == 1) // Single Choice
		{
			newAnswers.Add(new Answer { Text = inputValue1, IsCorrect = IsSingleChoiceSelected(0) });
			newAnswers.Add(new Answer { Text = inputValue2, IsCorrect = IsSingleChoiceSelected(1) });
			newAnswers.Add(new Answer { Text = inputValue3, IsCorrect = IsSingleChoiceSelected(2) });
			newAnswers.Add(new Answer { Text = inputValue4, IsCorrect = IsSingleChoiceSelected(3) });

			singleChoiceQuestions.Add(new ExamQuestion
				{
					Text = Question,
					Answers = newAnswers
				});

		}
		else if (activeButton == 2) // Multiple Choice
		{
			newAnswers.Add(new Answer { Text = inputValue1, IsCorrect = selectedAnswerIndexes.Contains(0) });
			newAnswers.Add(new Answer { Text = inputValue2, IsCorrect = selectedAnswerIndexes.Contains(1) });
			newAnswers.Add(new Answer { Text = inputValue3, IsCorrect = selectedAnswerIndexes.Contains(2) });
			newAnswers.Add(new Answer { Text = inputValue4, IsCorrect = selectedAnswerIndexes.Contains(3) });

			multipleChoiceQuestions.Add(new ExamQuestion
				{
					Text = Question,
					Answers = newAnswers
				});
		}
		else if (activeButton == 3) // Text Choice
		{
			newAnswers.Add(new Answer { Text = inputValue1 });

			textQuestions.Add(new ExamQuestion
				{
					Text = Question,
					Answers = newAnswers
				});
		}

		var newQuestion = new ExamQuestion
			{
				Text = Question,
				Answers = newAnswers
			};

		ExamService.AddQuestion(newQuestion);

		Question = "";
		inputValue1 = "";
		inputValue2 = "";
		inputValue3 = "";
		inputValue4 = "";
		selectedAnswerIndex = -1;
		selectedAnswerIndexes.Clear();
	}

	private List<ExamQuestion> GetQuestionsForActiveButton()
	{
		if (activeButton == 1)
		{
			return singleChoiceQuestions;
		}
		else if (activeButton == 2)
		{
			return multipleChoiceQuestions;
		}
		else if (activeButton == 3)
		{
			return textQuestions;
		}
		return new List<ExamQuestion>();
	}

	private void EditQuestion(ExamQuestion question)
	{
		isEditing = true;

		if (activeButton == 3) // Text Choice
		{
			Question = question.Text;
			inputValue1 = question.Answers[0].Text;
			selectedAnswerIndex = -1;
		}
		else // Single Choice or Multiple Choice
		{
			Question = question.Text;
			inputValue1 = question.Answers[0].Text;
			inputValue2 = question.Answers[1].Text;
			inputValue3 = question.Answers[2].Text;
			inputValue4 = question.Answers[3].Text;

			if (activeButton == 1) // Single Choice
			{
				selectedAnswerIndex = question.Answers.FindIndex(answer => answer.IsCorrect);
			}
			else if (activeButton == 2) // Multiple Choice
			{
				selectedAnswerIndexes.Clear();
				for (int i = 0; i < question.Answers.Count; i++)
				{
					if (question.Answers[i].IsCorrect)
					{
						selectedAnswerIndexes.Add(i);
					}
				}
			}
		}

		if (activeButton == 1) // Single Choice
		{
			singleChoiceQuestions.Remove(question);
		}
		else if (activeButton == 2) // Multiple Choice
		{
			multipleChoiceQuestions.Remove(question);
		}
		else if (activeButton == 3) // Text Choice
		{
			textQuestions.Remove(question);
		}
	}


	private void MoveQuestionUp(ExamQuestion question)
	{
		if (activeButton == 1) // Single Choice
		{
			MoveQuestionUpForList(singleChoiceQuestions, question);
		}
		else if (activeButton == 2) // Multiple Choice
		{
			MoveQuestionUpForList(multipleChoiceQuestions, question);
		}
		else if (activeButton == 3) // Text Choice
		{
			MoveQuestionUpForList(textQuestions, question);
		}
	}

	private void MoveQuestionDown(ExamQuestion question)
	{
		if (activeButton == 1) // Single Choice
		{
			MoveQuestionDownForList(singleChoiceQuestions, question);
		}
		else if (activeButton == 2) // Multiple Choice
		{
			MoveQuestionDownForList(multipleChoiceQuestions, question);
		}
		else if (activeButton == 3) // Text Choice
		{
			MoveQuestionDownForList(textQuestions, question);
		}
	}

	private void MoveQuestionUpForList(List<ExamQuestion> questionList, ExamQuestion question)
	{
		int currentIndex = questionList.IndexOf(question);
		if (currentIndex > 0)
		{
			questionList.RemoveAt(currentIndex);
			questionList.Insert(currentIndex - 1, question);
		}
	}

	private void MoveQuestionDownForList(List<ExamQuestion> questionList, ExamQuestion question)
	{
		int currentIndex = questionList.IndexOf(question);
		if (currentIndex < questionList.Count - 1)
		{
			questionList.RemoveAt(currentIndex);
			questionList.Insert(currentIndex + 1, question);
		}
	}

	private void DeleteQuestion(ExamQuestion question)
	{
		if (activeButton == 1) // Single Choice
		{
			singleChoiceQuestions.Remove(question);
		}
		else if (activeButton == 2) // Multiple Choice
		{
			multipleChoiceQuestions.Remove(question);
		}
		else if (activeButton == 3) // Text Choice
		{
			textQuestions.Remove(question);
		}
	}

	private async Task CreateExam()
	{
		List<ExamQuestion> questions = new List<ExamQuestion>
{
	new ExamQuestion
	{
		id = "32",
		questionId = "32",
		Type = "36",
		examId = "432",
		examinerId = "as",
		userId = "fd",
		Text = "fdf"
	},
};
		Exams exam = new Exams
			{
				Title = ExamTitle,
				id = "25",
				ExamType = "public",
				Category = "Math",
				Description = "None",
				IsPublic = true,
				AvailabilityStart = new DateTime(2023, 8, 21, 14, 3, 0),
				AvailabilityEnd = new DateTime(2023, 8, 28, 14, 43, 0),
				PublicityDate = new DateTime(2023, 8, 20, 14, 43, 0),
				MaxAttemptDuration = 2,
				Questions = questions
			};
	


		var response = await httpClient.PostAsJsonAsync("https://wa-brainspark-pol-dev.azurewebsites.net/exams", exam);

	}
}
